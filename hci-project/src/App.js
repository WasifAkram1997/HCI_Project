import React, { useEffect, useState } from "react";
import { BrowserRouter as Router, Route, Routes, useLocation } from "react-router-dom";
import {loadStripe} from '@stripe/stripe-js';
import {
 Elements
} from '@stripe/react-stripe-js';
import Login from "./components/Login";
import Signup from "./components/SignUp";
import NavbarComponent from "./components/Navbar";
import Homepage from "./components/Homepage";
import Contact from "./components/Contact";
import Payment from "./components/Payment";
import Leaderboard from "./components/Leaderboard";
import CalendarTrial from "./components/CalendarTrial";
import Newsletter from "./components/Newsletter";
import Footer from "./components/Footer";
import CheckoutForm from "./components/Stripe";
import PaymentComponent from "./components/Stripe";
import PaymentForm from "./components/PaymentForm";
import PaymentPage from "./components/PaymentForm";
import convertToSubCurrency from "./lib/convertToSubCurrency";
import CheckoutPage from "./components/CheckoutPage";
import PaymentConfirmation from "./components/PaymentSuccess";
import "./App.css"
import 'react-toastify/dist/ReactToastify.css';



const App = () => {
  const [user, setUser] = useState(null);
  const [location, setLocation] = useState()
  const [clientSecret, setClientSecret] = useState('');
  

  const handleLogin = (user) => {
    setUser(user);
  };

  const amount = 10.00;

//   const stripePromise = loadStripe('pk_test_6pRNASCoBOKtIshFeQd4XMUh');
  const stripePromise = loadStripe('pk_test_51RBaYOB2FNgKstoSb3jJpG2dQXroGOyqyLhHFULWKQ2GUpMd6relZIYj9QTFkM2AmlQGxcZ1t3SKP4X5JKKbYdA300QsJsxhkq');  // Replace with your actual public key

// const [clientSecret, setClientSecret] = useState('');

// Fetch the clientSecret from your backend API
// useEffect(() => {
//   const createPaymentIntent = async () => {
//     const response = await fetch('http://localhost:4000/create-payment-intent', {
//       method: 'POST',
//       headers: {
//         'Content-Type': 'application/json',
//       },
//       body: JSON.stringify({ amount: 1000 }),  // Example: $10.00 in cents
//     });

//     const data = await response.json();
//     setClientSecret(data.clientSecret);  // Set the client secret from the response
//   };

//   createPaymentIntent();
// }, []);
// const options = {
//   mode: 'payment',
//   amount: 1099,
//   currency: 'usd',
//   // Fully customizable with appearance API.
//   appearance: {
//     /*...*/
//   },
// };

    // // Simulate backend payment intent creation by generating a mock client secret
    // useEffect(() => {
    //   // Simulating creating a PaymentIntent (in a real app, this would be on your server)
    //   const mockClientSecret = 'pi_1Hj0FSJcYy23A23bOg_secret_LJswkxOj6rDzL5J9FxH7qY';  // This should be dynamically generated by your server
    //   setClientSecret(mockClientSecret);
    // }, []);

 


  useEffect(() => {
    setLocation(window.location.pathname)
  }, [window.location.pathname])



  // console.log(user)
  // console.log(location)


  return (
    <>
    <Router>
      <>
        {/* Always render Navbar on Homepage */}
        {/* {window.location.pathname !== "/login" && window.location.pathname !== "/signup" && (
          <NavbarComponent onLogout={handleLogin} user={user} />
        )} */}

        

        {
          location == '/' || user ? (<NavbarComponent onLogout={handleLogin} user={user} />) : <></>
        }
        
        <Routes>
          {/* Routes without Navbar (Login, Signup) */}
          <Route path="/" element={<Homepage />} />
          <Route path="/login" element={<Login onLogin={handleLogin} setLocation={setLocation}/>} />
          <Route path="/signup" element={<Signup setLocation={setLocation} onSignup={handleLogin}/>} />

          {/* Routes with Navbar, only if the user is logged in */}
          <Route path="/leaderboard" element={  <Leaderboard user={user} setUser={setUser} /> } />
          <Route path="/newsletter" element={ <Newsletter user={user}/> } />
          <Route path="/contact" element={ <Contact />} />
          <Route path="/scheduler" element={ <CalendarTrial user={user} setUser={setUser} /> } />
          <Route path="/payment" element={ <Elements stripe={stripePromise} options={{
            mode: 'payment',
            amount: convertToSubCurrency(amount),
            currency: "usd"
          }}> <CheckoutPage amount={amount} /> </Elements>} />
          <Route path="/payment-success" element={<PaymentConfirmation /> }/>
        </Routes>
        {
          location == '/' || user ? (<Footer />) : <></>
        }
        
        
      </>
    </Router>
   
    </>
  );
};

export default App;
